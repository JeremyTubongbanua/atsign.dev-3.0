var suggestions=document.getElementById("suggestions"),search=document.getElementById("search");search!==null&&document.addEventListener("keydown",inputFocus);function inputFocus(e){e.ctrlKey&&e.key==="/"&&(e.preventDefault(),search.focus()),e.key==="Escape"&&(search.blur(),suggestions.classList.add("d-none"))}document.addEventListener("click",function(e){var t=suggestions.contains(e.target);t||suggestions.classList.add("d-none")}),document.addEventListener("keydown",suggestionFocus);function suggestionFocus(n){const s=suggestions.classList.contains("d-none");if(s)return;const e=[...suggestions.querySelectorAll("a")];if(e.length===0)return;const t=e.indexOf(document.activeElement);if(n.key==="ArrowUp"){n.preventDefault();const s=t>0?t-1:0;e[s].focus()}else if(n.key==="ArrowDown"){n.preventDefault();const s=t+1<e.length?t+1:t;e[s].focus()}}(function(){var e=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:"id",store:["href","title","description"],index:["title","description","content"]}});e.add({id:0,href:"/docs/sdk/flutter/flutter/",title:"FLUTTER1",description:"SEO DESCRIPTION (FOR SEARCH)\n",content:"TODO YOUR PAGE CONTENT GOES HERE\u0026hellip;\n"}).add({id:1,href:"/docs/atplatform/architecture/",title:"Architecture",description:"My SEO description\n",content:""}).add({id:2,href:"/docs/_tutorials/atmosphere-pro/",title:"@mosphere Pro",description:"My SEO description\n",content:""}).add({id:3,href:"/docs/contribute/shortcodes/",title:"Atsign.dev shortcodes",description:"Atsign.dev shortcodes",content:""}).add({id:4,href:"/docs/",title:"@platform Documentation",description:"Documentation for the @platform.\n",content:"I want to\u0026hellip; #\rGet Started This is a card with lots of inner text to determine whether it fits nicely within the card itself.\n   Get Started This is a card with lots of inner text to determine whether it fits nicely within the card itself.\n    Samples \u0026amp; Tutorials #\rDess \u0026rarr;    References #\rSDK Reference \u0026rarr; Flutter \u0026rarr;    SDK Reference \u0026rarr; Java \u0026rarr;    Go to Java   Go to Flutter  \n"}).add({id:5,href:"/docs/_tutorials/at-dude/",title:"at_dude",description:"My SEO description\n",content:""}).add({id:6,href:"/docs/glossary/",title:"Glossary",description:"My SEO description\n",content:""}).add({id:7,href:"/docs/_tutorials/_at_demos/",title:"at_demos",description:"My SEO description\n",content:""}).add({id:8,href:"/docs/_tutorials/_dess/",title:"Dess",description:"My SEO description\n",content:""}).add({id:9,href:"/docs/_tutorials/_shortcodes/",title:"Shortcodes",description:"My SEO description\n",content:""}).add({id:10,href:"/docs/atplatform/",title:"The @Platform",description:"My SEO description\n",content:""}).add({id:11,href:"/docs/sdk/",title:"SDK Reference",description:"My SEO description\n",content:""}).add({id:12,href:"/docs/sdk/flutter/",title:"Flutter Reference",description:"My SEO description\n",content:""}).add({id:13,href:"/docs/atplatform/overview/",title:"The @ Platform Overview",description:"My SEO description\n",content:""}).add({id:14,href:"/docs/atplatform/root-server/",title:"Root Server",description:"My SEO description\n",content:""}).add({id:15,href:"/docs/atplatform/secondary-server/",title:"Secondary Server",description:"My SEO description\n",content:""}).add({id:16,href:"/docs/atplatform/specification/",title:"The @protocol Specification",description:"My SEO description\n",content:""}).add({id:17,href:"/docs/start/flutter-dev/",title:"Flutter Development",description:"My SEO description\n",content:""}).add({id:18,href:"/docs/sdk/flutter/codelab-test/",title:"My first codelab",description:"My SEO Description\n",content:""}).add({id:19,href:"/docs/sdk/java/",title:"Java Reference",description:"My SEO description\n",content:""}).add({id:20,href:"/docs/sdk/flutter/services_and_managers/",title:"Services \u0026 Managers",description:"My SEO Description\n",content:""}).add({id:21,href:"/docs/_tutorials/_dess/aws/",title:"Setup dess on AWS (Amazon Web Services) Platform",description:"My SEO Description\n",content:""}).add({id:22,href:"/docs/_tutorials/_dess/gcp/",title:"Setup dess on GCP (Google Cloud) Platform",description:"My SEO Description\n",content:""}).add({id:23,href:"/docs/sdk/flutter/flutter2/",title:"FLUTTER2",description:"SEO DESCRIPTION (FOR SEARCH)\n",content:"TODO YOUR PAGE CONTENT GOES HERE\u0026hellip;\n"}).add({id:24,href:"/docs/start/java-dev/",title:"Java Development",description:"My SEO description\n",content:""}).add({id:25,href:"/docs/sdk/flutter/flutter3/",title:"FLUTTER3",description:"SEO DESCRIPTION (FOR SEARCH)\n",content:"TODO YOUR PAGE CONTENT GOES HERE\u0026hellip;\n"}).add({id:26,href:"/docs/start/iot-devices/",title:"IOT devices",description:"My SEO description\n",content:""}).add({id:27,href:"/docs/start/networking/",title:"Networking",description:"My SEO description\n",content:""}).add({id:28,href:"/docs/start/more/",title:"Other",description:"My SEO description\n",content:""}).add({id:29,href:"/docs/_tutorials/",title:"Samples \u0026 Tutorials",description:"My SEO description\n",content:""}).add({id:30,href:"/docs/contribute/",title:"Contribute to this Site",description:"How to contribute to atsign.dev",content:""}).add({id:31,href:"/docs/start/",title:"Get Started",description:"My SEO description\n",content:""}).add({id:32,href:"/docs/_tutorials/_dess/aws/7_activation/",title:"Activation of @sign",description:"Documentation\n",content:"Next up we need to activate it\nLogin to your dashboard at atsign.com/dashboard\nOpen “my @signs”\n\r\r\rOpen “managed” of @sign you are registering”\n\r\r\rNavigate to Advance settings:\n\r\r\rIf you have already activated your @sign you will be prompted to erase all your data first\n\r\r\rOnce done you are able to link your @sign with your private dess. Use your domain and port number with which you have created service on your cloud instance and press Activate.\n\r\r\rYou should see that your @sign is being activated in your dashboard:\n\r\r\rThis can take several minutes so go get cup of coffee, some tea maybe, stretch your body and pray you haven’t made any mistakes!\nOnce the activation process completes you are welcomed by green Activated.\n\r\r\rYou can now open @buzz or @wavi and register your @sign via QR code and generate your keys!\nCONGRATULATIONS\n"}).add({id:33,href:"/docs/_tutorials/_dess/gcp/7_activation/",title:"Activation of @sign",description:"Documentation\n",content:"Next up we need to activate it\nLogin to your dashboard at https://my.atsign.com/dashboard\nOpen “my @signs”\n\r\r\rOpen “managed” of @sign you are registering”\n\r\r\rNavigate to Advance settings:\n\r\r\rIf you have already activated your @sign you will be prompted to erase all your data first\n\r\r\rOnce done you are able to link your @sign with your private dess. Use your domain and port number with which you have created service on your cloud instance and press Activate\n\r\r\rYou should see that your @sign is being activated in your dashboard:\n\r\r\rThe activation will be completed once you have used your QR code from dess and retrieved your keys.\nOnce the activation process completes you are welcomed by green Activated.\n\r\r\rCONGRATULATIONS\n"}).add({id:34,href:"/docs/sdk/flutter/services_and_managers/at_client_manager/",title:"AtClientManager",description:"Documentation\n",content:"Overview #\rThe AtClientManager is in charge of overseeing and managing all client services.It makes NotificationService, SyncService, and Client application preferences easier to access from its instance.It is also used for client method calls.\nBased on your need you can either install at_client_mobile or at_client and import. After that you will be able to make an AtClientManager Instance. Now to Initialize the AtClient instance , the setCurrentAtsign method needs to be called.\nAtClientManager.getInstance().setCurrentAtSign(\u0026#39;@alice\u0026#39;, \u0026#39;wavi\u0026#39;, \u0026lt;preference\u0026gt;); The setCurrentAtSign method accepts the following arguments: currentAtSign, namespace and the preferences. The currentAtsign argument accepts an @sign , namespace accepts the namespace of the app and the preference accepts AtClientPreference value which we are going to discuss next.\nAfter Initializing you are ready to make calls of client methods and services. The AtClientManger Instance has a getter atClient which returns an instance of AtClient.\nUsage #\rTo access CRUD methods,\nAtClient atClient = atClientManager.atClient; To access NotificationService methods\nNotificationService notificationService = atClientManager.notificationService; And for the SyncService which is responsible for invoking the sync :\nSyncService syncService = atClientManager.syncService; "}).add({id:35,href:"/docs/sdk/flutter/services_and_managers/at_client_preference/",title:"AtClientPreference",description:"Documentation\n",content:"Overview #\rAtClientPreference is used to configure the preferences of an @platform application. It offers a variety of attributes to give a developer ultimate flexibility.\n   Attributes Description     hiveStoragePath Local device path of hive storage   commitLogPath Local device path of commit log   isLocalStoreRequired Specify whether local store is required   cramSecret Shared secret of the atSign   keyStoreSecret Secret key to encrypt keystore data   privateKey Private key of the atSign   namespace Specifies the namespace of an app.   rootDomain Domain of the root server. Defaults to root.atsign.com   rootPort Port of the root server. Defaults to 64   syncIntervalMins Frequency of sync tasks to run in minutes. Defaults to 10 minutes.   outboundConnectionTimeout Idle time in milliseconds of connection to secondary server. Default to 10 minutes.   maxDataSize Maximum data size a secondary can store. Temporary solution. Have to fetch this from the server using stats verb.   downloadPath Default path to download stream files   syncRegex regex to perform sync   syncBatchSize Number of keys to batch for sync to secondary server   syncPageLimit The number of keys to pull from cloud secondary to local secondary in a single call.    For Local device paths we recommend the path_provider package.\nUsage #\rFuture\u0026lt;AtClientPreference\u0026gt; loadAtClientPreference() async { var dir = await getApplicationSupportDirectory(); return AtClientPreference() ..rootDomain = \u0026#39;root.atsign.org\u0026#39; ..namespace = \u0026#39;sdkExample\u0026#39; ..hiveStoragePath = dir.path ..commitLogPath = dir.path ..isLocalStoreRequired = true // TODO set the rest of your AtClientPreference here ; } "}).add({id:36,href:"/docs/contribute/shortcodes/button/",title:"Buttons",description:"Button shortcodes used in atsign.dev",content:" button/link #\rA button that links to another page.\n   Attribute Description     href The html href to the content when the button is clicked.   type The button style (Any bootstrap style, defaults to \u0026lsquo;primary\u0026rsquo;)   text The label for the button.    Note: Only primary and secondary types are fully supported.\nExample #\rSecondary   Primary  \n1{{\u0026lt;button/linkhref=\u0026#34;#\u0026#34;type=\u0026#34;secondary\u0026#34;text=\u0026#34;Secondary\u0026#34;\u0026gt;}} 2{{\u0026lt;button/linkhref=\u0026#34;#\u0026#34;type=\u0026#34;primary\u0026#34;text=\u0026#34;Primary\u0026#34;\u0026gt;}} "}).add({id:37,href:"/docs/contribute/shortcodes/card/",title:"Cards",description:"Card shortcodes used in atsign.dev",content:" card/breadcrumb #\rA breadcrumb style card that links to another page.\n   Attribute Description     href The html href to the content when the card is clicked.   first The first text element in the breadcrumb   second The second text element in the breadcrumb   third The third text element in the breadcrumb    Example #\rFirst \u0026rarr;    First \u0026rarr; Second \u0026rarr;    First \u0026rarr; Second \u0026rarr; Third \u0026rarr;    1{{\u0026lt;card/breadcrumbhref=\u0026#34;#\u0026#34;first=\u0026#34;First\u0026#34;\u0026gt;}} 2{{\u0026lt;card/breadcrumbhref=\u0026#34;#\u0026#34;first=\u0026#34;First\u0026#34;second=\u0026#34;Second\u0026#34;\u0026gt;}} 3{{\u0026lt;card/breadcrumbhref=\u0026#34;#\u0026#34;first=\u0026#34;First\u0026#34;second=\u0026#34;Second\u0026#34;third=\u0026#34;Third\u0026#34;\u0026gt;}} card/feature #\rA feature style card that links to another page.\n   Attribute Description     href The html href to the content when the card is clicked.   class Additional css classes to apply to the card.   title The title for the card   text The text in the body of the card    See bootstrap cards for more information.\nExample #\rMy Card My text goes here...\n    1{{\u0026lt;card/featureclass=\u0026#34;w-50\u0026#34;href=\u0026#34;#\u0026#34;title=\u0026#34;My Card\u0026#34;text=\u0026#34;My text goes here...\u0026#34;\u0026gt;}} card/group #\rA wrapper for cards using bootstrap\u0026rsquo;s deck style.\nNo attributes for this shortcode.\nExample #\rFeature Card 1 This is the first card to show the deck example.\n   Feature Card 2 This is the second card to show the deck example.\n     1{{%card/group%}} 2{{\u0026lt;card/featureclass=\u0026#34;w-25\u0026#34;href=\u0026#34;/docs/contribute/shortcodes/card\u0026#34;3title=\u0026#34;Feature Card 1\u0026#34;text=\u0026#34;This is the first card to show the deck example.\u0026#34;\u0026gt;}} 4{{\u0026lt;card/featureclass=\u0026#34;w-25\u0026#34;href=\u0026#34;/docs/contribute/shortcodes/card\u0026#34;5title=\u0026#34;Feature Card 2\u0026#34;text=\u0026#34;This is the second card to show the deck example.\u0026#34;\u0026gt;}} 6{{%/card/group%}} card/social #\rA card for linking to a social platform.\n   Attribute Description     class Additional css classes to apply to the bootstrap card element.   title The title for the card.   img-src The src for the img element.   img-class Additional css classes to apply to the img tag.   img-type The type of image, can be one of \u0026lsquo;page\u0026rsquo;, \u0026lsquo;asset\u0026rsquo;, or \u0026lsquo;remote\u0026rsquo; (default)    Example #\rWavi Start contributing, this is where the code hits the fan.     1{{\u0026lt;card/socialhref=\u0026#34;https://github.com/\u0026#34;class=\u0026#34;w-50\u0026#34;title=\u0026#34;Wavi\u0026#34;img-src=\u0026#34;https://wavi.ng/assets/img/wavimetalogo.jpeg\u0026#34;img-class=\u0026#34;bg-white p-5\u0026#34;\u0026gt;}} 2Start contributing, this is where the code hits the fan. 3{{\u0026lt;/card/social\u0026gt;}} "}).add({id:38,href:"/docs/contribute/shortcodes/image/",title:"Images",description:"Image shortcodes used in atsign.dev",content:" Include an image using the 3 different types:\n remote (default) page asset     Attribute Description     class Additional css classes to apply to the img element.   src The src for the image (url or path).   type The type of image (remote, page or global).    image - remote #\rUsed when you would like to use an image from another site (with permission of course!).\nYou do not need to specify a type for this since it is default.\nSet src to the url of the image.\nExample #\r1{{\u0026lt;imageclass=\u0026#34;bg-white\u0026#34;src=\u0026#34;https://atsign.com/wp-content/uploads/2020/09/The@Company-Logo@2x.png.webp\u0026#34;\u0026gt;}} image - page #\rUsed when an image belongs to this site, and only needs to be visible from a single page.\nSet the type to \u0026ldquo;page\u0026rdquo; for this.\nSet the src to the filename for your image.\nIf your page is not named \u0026ldquo;index.md\u0026rdquo; or \u0026ldquo;_index.md\u0026rdquo;:\n Create a folder with the same name as your page (without the \u0026ldquo;.md\u0026rdquo;). Place your file in this folder and rename it to index.md Place your image in the folder, and you should be good to go!.  Your folder structure should look like this after:\n- my_page (folder) \\ - index.md \\ - my_image.png Example #\r1{{\u0026lt;imageclass=\u0026#34;bg-white\u0026#34;src=\u0026#34;my_image.png\u0026#34;type=\u0026#34;page\u0026#34;\u0026gt;}} image - asset #\rUsed when an image belongs to this site, and needs to be visible from multiple pages.\nSet the type to \u0026ldquo;asset\u0026rdquo; for this.\nSet the src to the filepath for your image from within the assets folder.\nExample #\r1{{\u0026lt;imageclass=\u0026#34;bg-white\u0026#34;src=\u0026#34;img/contributing/my_global_image.png\u0026#34;type=\u0026#34;asset\u0026#34;\u0026gt;}} "}).add({id:39,href:"/docs/_tutorials/_dess/aws/5_setup_and_deployment/",title:"Instance setup and dess deployment",description:"Documentation\n",content:"Open your LightSail console\nBy now you should see your instance in “Running state”\n\r\r\rOpen it and on tab Connect click on “Connect using SSH”\n\r\r\rYou should be presented by a new window with command line:\n\r\r\rBefore we do anything else, we should update the system:\nsudo apt update \u0026amp;\u0026amp; sudo apt upgrade This might take some time, but it will make sure we have latest repository information and the system is up to date.\nNext make sure curl is installed, we will use curl to pull the dess installation file:\nsudo apt install curl\nFinally, run the dess installer:\ncurl -fsSL https://getdess.atsign.com | sudo bash\nOnce the installer is finished you should be prompted like so:\nDess installed, please move on to the sudo dess-create command.\n"}).add({id:40,href:"/docs/_tutorials/_dess/gcp/5_setup_and_deployment/",title:"Instance setup and dess deployment",description:"Documentation\n",content:"Open your GCP console at https://console.cloud.google.com/compute/instances and search for VM instances\n\rBy now you should see your instance in “Running state”\n\r\r\rClick on the SSH button and connect to your instance.\nYou should be presented by new window with command line:\n\r\r\rBefore we do anything else, we should update the system:\nsudo apt update \u0026amp;\u0026amp; sudo apt upgrade\nThis might take some time, but it will make sure we have latest repository information and the system is up to date.\nNext make sure curl is installed, we will use curl to pull the dess installation file:\nsudo apt install curl Finally, run the dess installer:\ncurl -fsSL https://getdess.atsign.com | sudo bash\nOnce the installer is finished you should be prompted like so:\nDess installed, please move on to the sudo dess-create command.\n"}).add({id:41,href:"/docs/_tutorials/_dess/aws/1_introduction/",title:"Introduction",description:"Documentation\n",content:"In this step-by-step guide I will walk you through all steps required to setup your own private dess using AWS. Please use the index to skip some steps in case you have already completed them.\n"}).add({id:42,href:"/docs/_tutorials/_dess/gcp/1_introduction/",title:"Introduction",description:"Documentation\n",content:"dess stands for “Distributed Edge Secondary Server” and it is used to host your @signs on your own secondary server. Refer to the Setup dess guide under Options to learn more.\nIn this step-by-step guide we will walk you through all steps required to setup your own private dess in GCP cloud from scratch. Please use index to skip some steps in case you have done them in another way.\n"}).add({id:43,href:"/docs/sdk/flutter/services_and_managers/introduction/",title:"Introduction",description:"Documentation\n",content:""}).add({id:44,href:"/docs/sdk/flutter/services_and_managers/key_basics/",title:"Key Basics",description:"Documentation\n",content:"Overview #\rTo store data, @platform utilizes a straightforward key-value method. A key serves as a unique identifier in key-value pairs.\nAtKey Structure:\n   Attributes Description Return Type     key Unique Identifier for the data String   sharedWith The @sign to share with String   sharedBy The @sign that is sharing String   namespace The namespace of the app String   metadata  Metadata   isRef  Bool    Metadata #\rMetadata In AtKey allows you to add more aspects of AtKey. If you want your data to live for a given period of time, or if you want it to be born/deleted after a set amount of time, metaData can help you with that.\nMetadata Structure:\n   Attributes Capabilities Return Type     ttl  int   ttb  int   ttr  int   ccd  bool   availableAt  DateTime   expiresAt  DateTime   refreshAt  DateTime   createdAt  DateTime   updatedAt  DateTime   dataSignature  String   sharedKeyStatus  bool   isPublic  bool   isHidden  bool   namespaceAware  bool   isBinary  bool   isEncrypted  bool   isCached  bool    Key Creation rules\nA key in @protocol has the structure described below.\n\u0026lt;Key Visibility\u0026gt;|\u0026lt;sharedWith\u0026gt;:\u0026lt;entity\u0026gt;.\u0026lt;namespace\u0026gt;@\u0026lt;sharedBy/owner\u0026gt;\nA key in @protocol should adhere to following rules:\n Length of a key should not be more than 240 characters (Limited by the current impl of the secondary. Not a protocol limitation) Max of fifty five 7-bit characters for the @sign Allowed characters in an entity are: [\\w._,-’”]  Namespace is mandatory in the current implementation of the protocol If cached then the owner of the key should not be same as current @sign sharedWith and sharedBy/owner cannot be same for a shared key sharedWith and sharedBy/owner should be same for a self key (Private, Hidden (_), Just self) Reserved keys in protocol, private keys and hidden keys cannot be notified Ex: notify:_secret@jagan:sitaram 9.Protocol prevents creation of a key with a owner/sharedBy using an @sign that’s not owned by the current user. Key cannot be a reserved key.  List of reserved keys:\n privatekey:at_pkam_privatekey privatekey:at_pkam_publickey public:publickey privatekey:privatekey shared_key privatekey:self_encryption_key signing_privatekey public:signing_publickey privatekey:at_secret privatekey:at_secret_deleted  @protocol data visibility\nThe @protocol saves data created in a key-value pair format. @protocol lets you create data with three levels of visibility. They are public, shared and self data. In the @protocol a piece of data is identified as a certain data type based on the key structure. In the SDK, AtKey exposes abstractions to create keys for the various data types. Below sections describe this in detail.\nPublic data\nPublic data can be looked up without authentication. I.e. if @bob wants to lookup public data in the secondary server of @alice, @bob does not need to prove to @alice that he is @bob to see the data publicly shared by @alice. Public view of the @alice’s data will be the same for any user on the @platform. I.e. if @jane and @john look up some public data from @alice, it will be exactly the same as what @bob sees.\nGood examples of public data in the real world are “first name” and the “last name”. We often don’t mind sharing our name with people, even random strangers.\nSigning of public data Public data is signed with the “private keys” of the user. Which means when @alice looks up @bob’s public data, @alice knows for sure that the data is indeed from @bob.\nCreating a public key in @protocol\nvar publicKey = AtKey.public(\u0026#39;phone\u0026#39;, namespace: \u0026#39;wavi\u0026#39;) .build(); Persisting public data in @protocol\nfinal atClientManager = await AtClientManager.getInstance() .setCurrentAtSign(‘@alice, \u0026#39;me\u0026#39;, AtClientPreference()); var atClient = atClientManager.atClient; var phoneKey = AtKey.public(\u0026#39;phone\u0026#39;, namespace: \u0026#39;wavi\u0026#39;) .build();; var value = \u0026#39;+1 100 200 300\u0026#39;; var putResult = await atClient.put(phoneKey, value); Shared data\nShared data does exactly what it says it does! It is created in order to share it with other people. These are the people we typically know and trust. When @bob shares his phone number with @alice, then only @alice can see that piece of data. Good examples of shared data in the real world are “phone number” and “email”. We only share these details with the people we know and trust.\nEncryption of shared data\nWhen @bob shares data to @alice, @bob generates a shared key for @alice and encrypts the data with the shared key. Further, the shared key is encrypted with the @alice public key. So the data shared is cryptographically secure.\nCreating a shared key in @protocol\nvar sharedKey = AtKey.shared(\u0026#39;phone\u0026#39;, namespace: \u0026#39;wavi\u0026#39;) ..sharedWith(\u0026#39;@bob\u0026#39;).build(); Persisting shared data in @protocol\nfinal atClientManager = await AtClientManager.getInstance() .setCurrentAtSign(‘@alice, \u0026#39;me\u0026#39;, AtClientPreference()); var atClient = atClientManager.atClient; var phoneKey = AtKey.shared(\u0026#39;phone\u0026#39;, namespace: \u0026#39;wavi\u0026#39;) ..sharedWith(\u0026#39;@bob\u0026#39;) .build(); var value = \u0026#39;+1 100 200 300\u0026#39;; var putResult = await atClient.put(phoneKey, value); Self data Self data is created for self. If @bob creates data for self, only @bob and no one else can see the data.\nGood examples of self data are “passwords” and “financial data”. We keep these details to ourselves.\nEncryption of self data\nWhen @bob creates data for self it is encrypted using @bob’s self encryption key.\nCreating a self key in @protocol\nvar selfKey = AtKey.self(\u0026#39;phone\u0026#39;, namespace: \u0026#39;wavi\u0026#39;) .build(); Persisting self data in @protocol\nfinal atClientManager = await AtClientManager.getInstance() .setCurrentAtSign(‘@alice, \u0026#39;me\u0026#39;, AtClientPreference()); var atClient = atClientManager.atClient; var phoneKey = AtKey.self(\u0026#39;phone\u0026#39;, namespace: \u0026#39;wavi\u0026#39;) .build(); var value = \u0026#39;+1 100 200 300\u0026#39;; var putResult = await atClient.put(phoneKey, value);  All of the above rules are implemented and exposed using the validate() method on AtKey. These rules are enforced during creation of the data.  Key attributes of @protocol data\nTTL - Time to live\nTTL (Time To Live) is the duration of time for which the key will be available. TTL is expressed in milliseconds. Adding TTL during the key creation results in the time at which the key expires.\n// Below key expires in 1 minute var phoneKey = (AtKey.shared(\u0026#39;phone\u0026#39;, namespace: \u0026#39;wavi\u0026#39;) ..sharedWith(\u0026#39;bob\u0026#39;) ..timeToLive(60000)) .build(); var value = \u0026#39;+1 100 200 300\u0026#39;; var putResult = await atClient.put(phoneKey, value); Scan/List behavior with TTL A key whose ttl has been set will be listed until a background job that runs at frequent time intervals deletes all the expired keys\nLookup/Get behavior with TTL As long as the key has not expired, a “lookup” of the key returns the value that was set originally. After the key expiry, ‘null’ is returned when the key is looked up for a value.\nTTB - Time to birth\nTTB (Time To Birth) is the span of time within which the key’s value is not available. TTB is expressed in milliseconds. Adding TTB during the key creation results in the time at which the key\u0026rsquo;s value is available.\n// Below key is available after 1 minute var phoneKey = (AtKey.shared(\u0026#39;phone\u0026#39;, namespace: \u0026#39;wavi\u0026#39;) ..sharedWith(\u0026#39;bob\u0026#39;) ..timeToBirth(60000)) .build(); var value = \u0026#39;+1 100 200 300\u0026#39;; var putResult = await atClient.put(phoneKey, value); Scan/List behavior with TTB\nA key whose ttb has been set will be listed.\nLookup/Get behavior with TTB\nUntil the key’s TTB is met, a “lookup” of the key returns ‘null’. After which the original value of the key is returned.\nTTR - Time to refresh\nTTR (Time To Refresh) is the span of time that represents the time interval at which the cached key will be refreshed with a new value(if the original key\u0026rsquo;s value is updated). TTR is expressed in seconds. Further, TTR can also be set to \u0026lsquo;-1\u0026rsquo; which represents the value of the original key will not be updated and therefore the cached key need not be refreshed.\nCacheability\nAll of the data created resides in the secondary server of an @sign. The owner of an @sign can choose to allow the public and the shared data to be cached in the another @sign\n// Below key refreshes everyday // TTR accepts time units in seconds var phoneKey = (AtKey.shared(\u0026#39;phone\u0026#39;, namespace: \u0026#39;wavi\u0026#39;) ..sharedWith(\u0026#39;bob\u0026#39;) ..cache(86400, true)) .build(); var value = \u0026#39;+1 100 200 300\u0026#39;; var putResult = await atClient.put(phoneKey, value); Scan/List behavior with TTR\nAll the keys with TTR and the cached keys that are created as a result of TTR are listed.\nLookup/Get behavior with TTR\nDuring lookup of a key, fetches for availability of the corresponding cached key. If a cached key is available, the value is returned. If cached is not available, fetches the value from the original key.\nUpdate behavior with TTR Only the owner of the key reserves the right to update the value. Updating the cached key’s value is prohibited.\nPropagation of an update to the cached key\nWhen an original key is updated by the creator, the ones who have cached it need to update the cached copy too. This can happen in two ways:\n The Auto-Notify notifies the updated value to another @sign, thereby the cached key’s value is updated. The refresh job in the secondary server  CCD - Cascade delete\nCCD (Cascade delete) compliments the TTR functionality by allowing the owner of the key to decide if the cached key has to be deleted upon the deletion of the original key. CCD accepts a boolean value(either true (or) false). When set to true, upon deletion of the original key, the cached key is also deleted. Setting false results in the cached key remains intact even after the origi\n@protocol CRUD operations\nCreate/Update Data SDK of @protocol exposes two methods to create the data. They are:\n put putMeta  put\nUpdate’s value of key is if it is already present. Otherwise creates a new key.\nTo share a key to another @sign, use AtKey.shared() factory method or populate AtKey.sharedWith with the @sign to whom the data has to be shared. Further, notifies the sharedWith @sign that a key has been created.\nSignature\nFuture\u0026lt;bool\u0026gt; put(AtKey key, dynamic value);\nAccepts an instance of AtKey and value and stores it in the local storage(local secondary) has a key-value pair.\nAtKey represents the key against which the value will be stored. It further describes to whom the data is shared and metadata of the key. key rules\nThe value can be either a textual information or a binary data (e.g. Images, Files etc ). Returns a boolean value that represents the status of the put method. Returns ‘TRUE’ when put is completed successfully, else returns false.\nThrows AtClientException with an error code and error description that describes that cause of the exception.\nputMeta\nUpdates the metadata of the key.\nSignature\nFuture\u0026lt;bool\u0026gt; putMeta(AtKey key);\nAccepts an Instance of AtKey. The Metadata is encapsulated in the AtKey. Set the new/updated metadata to [Atkey.Metadata].\nReturns a boolean value that represents the status of the putMeta method. Returns ‘TRUE’ when putMeta is completed successfully, else returns false.\nThrows AtClientException with an error code and error description that describes that cause of the exception.\nRead Data\nget\nGet the value of the key from the user\u0026rsquo;s cloud secondary. Signature Future\u0026lt;AtValue\u0026gt; get (AtKey key);\nAccepts an Instance of AtKey. The Metadata is encapsulated in the AtKey. Fetch both the value and metadata of the key.\nReturns a boolean value that represents the status of the ‘get’ method. Returns ‘TRUE’ when ‘get’ is completed successfully, else returns false.\nThrows AtClientException with an error code and error description that describes that cause of the exception.\ngetMeta\nGets the metadata of the key.\nSignature\nFuture \u0026lt;bool\u0026gt; getMeta(AtKey key);\nAccepts an Instance of AtKey. The Metadata is encapsulated in the AtKey. Gets the metadata of the key.\nReturns a boolean value that represents the status of the putMeta method. Returns ‘TRUE’ when getMeta is completed successfully, else returns false.\nThrows AtClientException with an error code and error description that describes that cause of the exception.\nDelete Data\nDeletes the key.\nSignature Future\u0026lt;bool\u0026gt; delete(AtKey key);\nAccepts an Instance of AtKey. Deletes the key from the storage. If the key is shared with another @sign, notifies the other @sign on the deletion of the key.\nReturns a boolean value that represents the status of the delete method. Returns ‘TRUE’ when delete is completed successfully, else returns false.\nThrows AtClientException with an error code and error description that describes that cause of the exception.\nList of Keys\ngetKeys\nGet all the keys stored in the user\u0026rsquo;s secondary in string format.\nSignature\nFuture \u0026lt;\u0026lt;List\u0026lt;String\u0026gt;\u0026gt; getKeys({String? regex, String? sharedBy, String? sharedWith});\nIf regex is specified only matching keys are returned, giving you the flexibility to use different regexes for different types of data.\ngetAtKeys\nGet all the keys stored in the user\u0026rsquo;s secondary in [AtKey] format.\nSignature\nFuture \u0026lt;\u0026lt;List\u0026lt;AtKey\u0026gt;\u0026gt; getAtKeys({String? regex, String? sharedBy, String? sharedWith});\nIf regex is specified only matching keys are returned, giving you the flexibility to use different regexes for different types of data.\nNotification\n"}).add({id:45,href:"/docs/sdk/flutter/services_and_managers/onboarding/",title:"Onboarding",description:"Documentation\n",content:"Overview #\rThe @platform uses secret keys for authenticating an at sign as cryptographically secure replacement for usernames and passwords.To make developers life easier @platform offers at_onboarding_flutter package which handles secure management of secret keys.If you are developing a new @platform app, we recommend that you use at_app which can create @platform app template that already contains onboarding in it.\nUsage #\rBefore using the onboarding widget, ensure that your AtClientPreference is properly assigned. If you need an appAPIKey please email us at.\nOnboarding( context: context, atClientPreference: atClientPreference!, domain: AtEnv.rootDomain, rootEnvironment: AtEnv.rootEnvironment, appAPIKey: AtEnv.appApiKey, onboard: (value, atsign) { _logger.finer(\u0026#39;Successfully onboarded $atsign\u0026#39;); }, onError: (error) { _logger.severe(\u0026#39;Onboarding throws $error error\u0026#39;); }, nextScreen: const HomeScreen(), ); }, child: const Text(\u0026#39;Onboard an @sign\u0026#39;), ), "}).add({id:46,href:"/docs/_tutorials/_dess/aws/2_prerequisites/",title:"Pre-requisites",description:"Documentation\n",content:" Registered @sign(s) to setup An AWS account A Fully Qualified Domain Name (FQDN)  1. Registering your @sign #\rThis topic is already well documented. Please follow the guidance of Our FAQs and register via the registrar site.\n2. Sign-up for AWS account #\rIf you are new to AWS, signing up for an account is free! The cost of running dess is about 10$/month. You can create your account at Amazon Web Services and as of June 6th, 2021 there is a “free tier” available which was used during the making of this guide.\naws-free-trial\nFollow the instructions on screen.\naws-sign-up\nOnce you are done with registration, you will be able to login to your aws console.\nMake sure that you select the correct region in the top right corner.\naws-region\nSelect the region that is geographically closest to your location for best performance.\nYou are now setup on AWS and ready to prepare dess.\n3. Register your own fully qualified domain name (FQDN) #\rThis step can be performed at a variety of sites, all with different pricing models. You can use sites like Go Daddy, Namecheap, and many others. However, since we have AWS account, we can use it to register our domain through the Route 53 service.\nIn your AWS console navigate to services in top left corner and select Route 53.\na) Register domain name with AWS. #\rIn your AWS console search for Route 53.\n\r\r\rYou can start looking for your domain directly from here:\n\r\r\rBased on the domain name you search, AWS will give you similar options, and their pricing. As I am looking for the best deal, the .link domain seems like a good option at a cost of 5$ / year.\nIn my case 4atsign.link is free and I will register it by clicking “Add to cart” and continue.\n\r\r\rFill out DNS registration form:\n\rContinue review details and order. At this point if all is fine you should see your domain request pending:\n\r\r\rThis can take some time so why don’t we move on to next step!\n"}).add({id:47,href:"/docs/_tutorials/_dess/gcp/2_prerequisites/",title:"Pre-requisites",description:"Documentation\n",content:" Register Atsign at atsign.com Have google account Have registered Fully Qualified Domain Name (FQDN)  1. Registering your @sign #\rThis topic is already well documented. Please follow the guidance of Our FAQs and register via the registrar site.\n2. Sign-up for GCP account #\ra) Account Creation #\rIf you are new to cloud like me and need to create new GCP account, I have good news! The creation is for free. As promotion all new customer will also receive 300$ as credit. That is more than enough to run multiple dess’s for 3 months of offer validity.\n\r\r\rYou can register with your gmail account or create new one by clicking “Get started for free” and follow instructions to register\n\rOnce done with registration you will be able to login to your console.cloud.google.com And voila you have your GCP account up and running.\nb) Setting up billing #\rTo be able to run some services you have to maintain billing account. Navigation Menu -\u0026gt; Billing\n\rBy default GCP creates “My Billing Account” which you can link to your project.\n\r\r\rClick “Link Billing account” and select “My billing account” from drop down\n🔴 Its important to note that this account holds your 300$ free credits! 🔴\nWe are all setup and ready to go deploy!\n3. Register your own fully qualified domain name (FQDN) #\rThis step can be performed at range of different sites with different pricing models. You can use sites like godaddy.com; namecheap.com; and many others. Since we have GCP account we can use it to register our domain through Cloud Domain.\na) Register domain name with GCP. #\rIn your GCP console search for Cloud Domain.\n\r\r\rWe first need to enable this service.\n\r\r\rOnce the service activates you will be presented with its dashboard.\nLets register our fully qualified domain name (FQDN) that will be used for registration of our dess.\nClick on “Register Domain” and look for suitable name.\n\r\r\rReviewing pricing options of GCP .pw is their cheapest option which will work for testing. For my test case I am selecting atsign.pw with price $0.75 / month by clicking add to cart button and continue.\n\r\r\rNext we can select where will our DNS record be hosted. Simply select “Use Google Domains” and DNSSEC “Enabled” and click continue.\n\r\r\rWe have no options with Privacy protection so simply click continue.\n\r\r\rFill out contact details and click register. This will trigger registration email you will have to verify.\n\r\r\rOnce you verify your email your domain should be ready to use\n\r\r\rb) Create Cloud DNS zone #\rNext step is to enable Cloud DNS service. Search for DNS in search bar and select Cloud DNS\n\rIf its your first time activating this service you will have to enable the API. Press enable and wait for the activation to finish.\n\r\r\rLets crate new DNS zone by clicking “Create Zone”\n\r\r\rWe will select zone type as Public since we will be connecting to our DNS from internet and provide your registered DNS name. In my case atsign.pw. DNSSEC will be set to off and provide some meaningful Description. Once you filled all your details press create.\n\r\r\rYou should receive following message:\n\r\r\r"}).add({id:48,href:"/docs/_tutorials/_dess/aws/3_prep_aws_instance/",title:"Preparing AWS Instance",description:"Documentation\n",content:"Now since I am new to AWS, the easiest way to get started is by using the LightSail service from service catalog. This will enable you to deploy small system which is more then capable of handling dess at pre-set price.\n\r\r\rWelcome to LightSail:\n\r\r\rFirst step is to create new instance. Fortunately, we have big orange button that can do just that!\nThere are several options we are presented at this moment. Since I am living in Europe I select “Frankfurt, Zone A (eu-central-1a)” as my instance location. Instance region will dictate how well will your instance response based on your geographical location. People located in India should selects APAC region where as people in US should select North America region. You can leave availability zone set as default.\n\r\r\rNext up will be selection of operating system we want to deploy. We know that dess works well with Ubuntu 20.04 LTS so lets select just that.\n\r\r\rYou are presented with couple more options, but unless you know what you are doing leave these as is.\n\rNow let’s select instance plan. dess is relatively light weight so for testing purposes I will select first instance plan for 3.5$/Month. This will provide us with 512 MB of RAM, 1vCPU, 20GB of storage and 1TB of data transfer. This is more than enough to run our dess.\n\r\r\rLastly we have to name our instance. This is the name you will be presented with in your dashboard.\n\r\r\rLast but not least is to press “Create instance”\n\r\r\rAfter a couple of seconds you should be re-routed to your dashboard and see your instance up and running:\n\r\r\r"}).add({id:49,href:"/docs/_tutorials/_dess/gcp/3_prep_aws_instance/",title:"Preparing GCP Instance",description:"Documentation\n",content:"Now since I am new to GCP the easiest way to start using it is with prebuild solutions. This way you will deploy small system which is more then capable of handling dess at pre-set price.\nWe can use pre-build “Ubuntu 20”. In Search bar look for Ubuntu20\n\r🔴 Make sure to use “Ubuntu 20” and not “Hardened Ubuntu 20”. Although the Hardened version will work as well it requires additional manual steps to make work.🔴\n​\nThis will take you to this prebuild solution overview page:\n\r\r\rSelect launch\n\r\r\rAnd press enable all required API’s\n\r\r\rOnce all API’s are activated you are taken to configuration page:\n\r\r\rPrices are based on region and power of selected Virtual Machine (VM). To cost optimize you can select US region / N1 / g1-small at cost of $15/Month.\nNext up is boot disk which we can leave as is.\n\r\r\rThis will deploy your Ubuntu 20.04 virtual machine.\n\r\r\r"}).add({id:50,href:"/docs/_tutorials/_dess/aws/4_prep_network_access/",title:"Preparing your instance for network access",description:"Documentation\n",content:"Assignment of Static IP #\rNext up, is to provide our instance with a static IP and linking our domain to it.\nWhen you click on your instance name, it will take you to the management console, which should look like this:\n\r\r\rThis is where you control hardware, connectivity and if needed can delete your instance.\nLets configure a static IP address for your new instance. Navigate to Networking and click on Create static IP:\n\r\r\rOur region and instance is selected, so the only thing left is to name our static IP. I selected the name atsign-static, but it can be any name you like.\n\r\r\rLets hit create:\n\r\r\rAnd voila, we now have a static IP address on the internet and it will not change. Now we can link our domain name with it.\n\r\r\rWhen you click on your instance name and navigate to Networking, the static IP is now assigned.\n\r\r\rAssignment of Domain name to your static IP #\rWe can now move on to linking our static IP address to our domain. This is done via the AWS console which can be accessed in the top right of Lightsail.\n\rVerify your email used for registering domain:\nBy now you should receive verification email that will confirm registration of your domain. Click this link before moving on.\nLinking domain with your static address:\nLets navigate to “Route 53” from Services menu.\n\r\r\rFrom your dashboard click on “Domain” which will take you to the “Registered Domains” tab.\n\r\r\rHere you can click on your registered domain which will take you to overview page with domain status and contacts.\n\r\r\rClick on “Manage DNS”\n\r\r\rAnd click on your domain name.\nThis will show you your DNS records for your domain. We now need to link A type record to your domain linking it to IP address of your instance.\nThis is done simply by typing your static IP address from previous step into field “Value” and clicking Create record:\n\r\r\rIf everything goes well you should see following in your domain dashboard:\n\r\r\rTo test if you are successful open command line and ping your domain. You should see your instance static IP address. It will not respond which is normal due to IPv4 firewall. It is actually good thing!\n\r\r\rAt this point we have created DNS record we will use to link our dess, we created instance name which will be running our dess and we have opened port range which is exposed to the internet and we can communicate with @sign root server and our apps with.\nSetting up Firewall #\rNext up we need to make sure we have ports open for our dess to communicate with root server and our apps. In Section networking go to section “IPv4 Firewall” and click “+ Add rule” Our rule will be “Custom” on TCP protocol with Port range in number higher then 1024. In my case I have selected port range 8000-8010. This will enable me to run up to 10 @signs in parallel.\n\r\r\rClick create and verify that your new rule is in list:\n\r\r\r"}).add({id:51,href:"/docs/_tutorials/_dess/gcp/4_prep_network_access/",title:"Preparing your instance for network access",description:"Documentation\n",content:"a) Assignment of Static IP #\rNext up our list of activities is providing our instance with static IP and linking our domain to it.\nGCP assigned ephemeral IP address to our newly created VM. We need to change it to static IP.\nIn search bar look for External IP addresses.\n\rYou should see your external IP address assigned to your VM\n\r\r\rIn column Type select ephemeral and change it to Static\n\rGive your static IP name and some description.\n\r\r\rType should now say Static\n\rb) Assignment of Domain name to your static IP #\rNext step is to point your domain to your virtual machine running dess.\nSearch for Cloud DNS\n\rOpen zone you have created in step 3.b Create Cloud DNS zone\n\r\r\rWe now need to link A type record to your domain linking it to IP address of your Virtual machine.\nThis is done simply press “Add record set”\n\r\r\rSelect Resource record type “A” and IPv4 address the address of your dess virtual machine.\n\r\r\rIf everything goes well you should see following in your domain dashboard:\n\r\r\rNext step is to update Google Name servers. You can follow Googles guide - step 5.\nhttps://cloud.google.com/dns/docs/tutorials/create-domain-tutorial#register-domain\nTo test if you are successful open command line and ping your domain. You should see your instance static IP address.\n\r\r\rAt this point we have created DNS record we will use to link our dess, we created instance name which will be running our dess and we have opened port range which is exposed to the internet and we can communicate with @sign root server and our apps with.\nc) Setting up Firewall #\rSearch for Firewall in search bar.\n\rClick on Create firewall rule\n\r\r\rLets create firewall rule that will enable the @sign root server communicate with our dess.\n\r\r\rImportant things to note:\nIngress translates to incoming traffic.\nSelecting IP range as 0.0.0.0/0 will allow traffic from anywhere on the internet.\nFor my use case I will enable port range 8000 – 8010 allowing me to register up to 10 @signs.\n\r\r\rPress create and validate that your new rule appears in list of firewall rules.\n\r\r\rSecond we need to create firewall rule that will enable your dess server to communicate with certification authority.\n\r\r\rImportant things to note:\nIngress translates to incoming traffic.\nSelecting IP range as 0.0.0.0/0 will allow traffic from anywhere on the internet.\nYou need to enable port 80 for communication with Certification authority.\n\r\r\rPress create and validate that your new rule appears in list of firewall rules.\n\r\r\r"}).add({id:52,href:"/docs/_tutorials/_dess/aws/6_registration/",title:"Registration of @sign in your private dess",description:"Documentation\n",content:"At this step you should already have your @sign registered at atsign.com. If not go do it!\nI have registered my own free @sign (@44likelycanary) which I will link to my dess.\nIn your instance console, navigate to dess folder. If you were following this guide it will be located in:\nWe now need to create the service that will host our @sign by executing the dess-create command:\n$ sudo dess-create @44likelycanary 4atsign.link 8000 \u0026lt;email address\u0026gt; likelycanary\nTo make it more understandable:\nI will be registering my @sign @44likelycanary.\nI will be using my domain 4atsign.link which I have registered through AWS.\nI am using port 8000 which I have opened in my instance firewall.\nMy registration email address is (this email is used to sign the SSL certificates).\nThe last likelycanary is the name that docker will use to track the service.\nIf everything is successful you should see output like this:\n\r\r\rAt this moment your @sign is registered on your dess.\n"}).add({id:53,href:"/docs/_tutorials/_dess/gcp/6_registration/",title:"Registration of @sign in your private dess",description:"Documentation\n",content:"At this step you should already have your @sign registered at atsign.com. If not go do it!\nI have registered my own free @sign (@44likelycanary) which I will link to my dess.\nIn your instance console, navigate to dess folder. If you were following this guide it will be located in:\nWe now need to create the service that will host our @sign by executing the dess-create command:\n$ sudo dess-create @44likelycanary 4atsign.link 8000 \u0026lt;email address\u0026gt; likelycanary\nTo make it more understandable:\nI will be registering my @sign @44likelycanary.\nI will be using my domain 4atsign.link which I have registered through AWS.\nI am using port 8000 which I have opened in my instance firewall.\nMy registration email address is (this email is used to sign the SSL certificates).\nThe last likelycanary is the name that docker will use to track the service.\nIf everything is successful you should see output like this:\n\r\r\rAt this moment your @sign is registered on your dess.\n"}).add({id:54,href:"/docs/contribute/shortcodes/showcase/",title:"Showcase",description:"Showcase shortcodes used in atsign.dev",content:" showcase/card #\rA card for showcasing a single item.\n   Attribute Description     class Additional css classes to apply to the bootstrap card element.   title The title for the card.   img-src The src for the img element.   img-class Additional css classes to apply to the img tag.   img-type The type of image, can be one of \u0026lsquo;page\u0026rsquo;, \u0026lsquo;asset\u0026rsquo;, or \u0026lsquo;remote\u0026rsquo; (default)    Example #\rWavi Your space on the privacy-first web.\nLearn more  Wavi.ng     1{{\u0026lt;showcase/cardclass=\u0026#34;w-50\u0026#34;title=\u0026#34;Wavi\u0026#34;img-src=\u0026#34;https://wavi.ng/assets/img/wavimetalogo.jpeg\u0026#34;img-class=\u0026#34;bg-white p-5\u0026#34;\u0026gt;}} 23{{\u0026lt;showcase/item\u0026gt;}}Your space on the privacy-first web.{{\u0026lt;/showcase/item\u0026gt;}} 45{{\u0026lt;showcase/linkhref=\u0026#34;https://atsign.com/apps/wavi\u0026#34;\u0026gt;}}Learn more{{\u0026lt;/showcase/link\u0026gt;}} 6{{\u0026lt;showcase/linkhref=\u0026#34;https://wavi.ng/@wavi\u0026#34;\u0026gt;}}Wavi.ng{{\u0026lt;/showcase/link\u0026gt;}} 78{{\u0026lt;/showcase/card\u0026gt;}} "}).add({id:55,href:"/docs/contribute/shortcodes/spacing/",title:"Spacing",description:"Spacing shortcodes used in atsign.dev",content:" Line Break (br) #\rInsert a simple line break.\nExample #\rSome text here  and then a line break.\n1Some text here {{\u0026lt;br\u0026gt;}} and then a line break. "}).add({id:56,href:"/docs/sdk/flutter/codelab-test/page1/",title:"Step 1",description:"Documentation\n",content:"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Interdum varius sit amet mattis vulputate. Eu consequat ac felis donec. Massa eget egestas purus viverra accumsan in nisl. Purus sit amet luctus venenatis lectus. Platea dictumst vestibulum rhoncus est pellentesque. Nunc scelerisque viverra mauris in aliquam sem fringilla ut. Vitae turpis massa sed elementum tempus egestas sed sed. Malesuada bibendum arcu vitae elementum curabitur vitae nunc. Eleifend mi in nulla posuere sollicitudin. Nisl tincidunt eget nullam non nisi. Enim sed faucibus turpis in eu mi bibendum neque egestas. Mauris sit amet massa vitae tortor condimentum lacinia quis. Lobortis scelerisque fermentum dui faucibus in ornare quam. Mi proin sed libero enim sed faucibus turpis.\nUt pharetra sit amet aliquam id diam. Vitae nunc sed velit dignissim sodales ut eu sem. Eget velit aliquet sagittis id consectetur purus ut. Nisi lacus sed viverra tellus in hac. Lorem dolor sed viverra ipsum nunc aliquet bibendum. Dolor sit amet consectetur adipiscing elit pellentesque habitant morbi. Nisi scelerisque eu ultrices vitae auctor eu augue. Fermentum leo vel orci porta non pulvinar neque. Et pharetra pharetra massa massa ultricies mi quis hendrerit. Eu lobortis elementum nibh tellus molestie. Quam elementum pulvinar etiam non quam lacus. Vestibulum mattis ullamcorper velit sed ullamcorper morbi tincidunt ornare. Fames ac turpis egestas maecenas. In dictum non consectetur a erat nam.\n1console.log(\u0026#39;script start\u0026#39;); 23setTimeout(function() { 4console.log(\u0026#39;setTimeout\u0026#39;); 5}, 0); 67Promise.resolve().then(function() { 8console.log(\u0026#39;promise1\u0026#39;); 9}).then(function() { 10console.log(\u0026#39;promise2\u0026#39;); 11}); 1213console.log(\u0026#39;script end\u0026#39;); Commodo sed egestas egestas fringilla phasellus faucibus scelerisque eleifend. Cras adipiscing enim eu turpis egestas pretium aenean pharetra. Et leo duis ut diam. Pellentesque diam volutpat commodo sed egestas egestas fringilla. Consectetur purus ut faucibus pulvinar elementum. Egestas fringilla phasellus faucibus scelerisque eleifend donec pretium vulputate sapien. Tortor pretium viverra suspendisse potenti nullam. Vitae congue mauris rhoncus aenean. Amet nisl suscipit adipiscing bibendum est ultricies integer quis. Aenean euismod elementum nisi quis. Pulvinar elementum integer enim neque. Ultricies tristique nulla aliquet enim tortor. Dictum at tempor commodo ullamcorper a lacus. Tempus imperdiet nulla malesuada pellentesque elit eget gravida cum. Et malesuada fames ac turpis egestas maecenas pharetra. Sit amet risus nullam eget. Viverra ipsum nunc aliquet bibendum enim facilisis gravida. Bibendum ut tristique et egestas quis.\nAliquet risus feugiat in ante metus dictum at tempor. Lacus viverra vitae congue eu consequat ac felis. Amet est placerat in egestas. Tristique nulla aliquet enim tortor at auctor urna. Faucibus a pellentesque sit amet porttitor eget dolor morbi non. Tincidunt lobortis feugiat vivamus at augue eget arcu. Tellus in metus vulputate eu scelerisque. Nulla malesuada pellentesque elit eget gravida cum sociis natoque penatibus. Etiam tempor orci eu lobortis elementum nibh tellus molestie nunc. Erat nam at lectus urna duis convallis convallis. Aliquam vestibulum morbi blandit cursus risus at ultrices. Mus mauris vitae ultricies leo integer malesuada nunc vel. Vel pharetra vel turpis nunc eget lorem dolor sed. Quis hendrerit dolor magna eget est lorem. A lacus vestibulum sed arcu non odio euismod lacinia.\nLobortis mattis aliquam faucibus purus in massa tempor nec. Ut venenatis tellus in metus. Donec ac odio tempor orci dapibus ultrices in iaculis nunc. Arcu felis bibendum ut tristique et egestas. Fermentum iaculis eu non diam phasellus vestibulum. Pellentesque diam volutpat commodo sed. Neque egestas congue quisque egestas diam in arcu cursus. Eleifend quam adipiscing vitae proin sagittis nisl rhoncus. Sed sed risus pretium quam vulputate dignissim suspendisse. Scelerisque fermentum dui faucibus in ornare quam viverra orci sagittis. Hendrerit gravida rutrum quisque non tellus. Blandit cursus risus at ultrices. Volutpat commodo sed egestas egestas fringilla phasellus faucibus scelerisque eleifend. Non blandit massa enim nec dui nunc. Viverra adipiscing at in tellus integer feugiat scelerisque varius.\n"}).add({id:57,href:"/docs/sdk/flutter/codelab-test/page2/",title:"Step 2",description:"Documentation\n",content:"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Interdum varius sit amet mattis vulputate. Eu consequat ac felis donec. Massa eget egestas purus viverra accumsan in nisl. Purus sit amet luctus venenatis lectus. Platea dictumst vestibulum rhoncus est pellentesque. Nunc scelerisque viverra mauris in aliquam sem fringilla ut. Vitae turpis massa sed elementum tempus egestas sed sed. Malesuada bibendum arcu vitae elementum curabitur vitae nunc. Eleifend mi in nulla posuere sollicitudin. Nisl tincidunt eget nullam non nisi. Enim sed faucibus turpis in eu mi bibendum neque egestas. Mauris sit amet massa vitae tortor condimentum lacinia quis. Lobortis scelerisque fermentum dui faucibus in ornare quam. Mi proin sed libero enim sed faucibus turpis.\nUt pharetra sit amet aliquam id diam. Vitae nunc sed velit dignissim sodales ut eu sem. Eget velit aliquet sagittis id consectetur purus ut. Nisi lacus sed viverra tellus in hac. Lorem dolor sed viverra ipsum nunc aliquet bibendum. Dolor sit amet consectetur adipiscing elit pellentesque habitant morbi. Nisi scelerisque eu ultrices vitae auctor eu augue. Fermentum leo vel orci porta non pulvinar neque. Et pharetra pharetra massa massa ultricies mi quis hendrerit. Eu lobortis elementum nibh tellus molestie. Quam elementum pulvinar etiam non quam lacus. Vestibulum mattis ullamcorper velit sed ullamcorper morbi tincidunt ornare. Fames ac turpis egestas maecenas. In dictum non consectetur a erat nam.\n1console.log(\u0026#39;script start\u0026#39;); 23setTimeout(function() { 4console.log(\u0026#39;setTimeout\u0026#39;); 5}, 0); 67Promise.resolve().then(function() { 8console.log(\u0026#39;promise1\u0026#39;); 9}).then(function() { 10console.log(\u0026#39;promise2\u0026#39;); 11}); 1213console.log(\u0026#39;script end\u0026#39;); Commodo sed egestas egestas fringilla phasellus faucibus scelerisque eleifend. Cras adipiscing enim eu turpis egestas pretium aenean pharetra. Et leo duis ut diam. Pellentesque diam volutpat commodo sed egestas egestas fringilla. Consectetur purus ut faucibus pulvinar elementum. Egestas fringilla phasellus faucibus scelerisque eleifend donec pretium vulputate sapien. Tortor pretium viverra suspendisse potenti nullam. Vitae congue mauris rhoncus aenean. Amet nisl suscipit adipiscing bibendum est ultricies integer quis. Aenean euismod elementum nisi quis. Pulvinar elementum integer enim neque. Ultricies tristique nulla aliquet enim tortor. Dictum at tempor commodo ullamcorper a lacus. Tempus imperdiet nulla malesuada pellentesque elit eget gravida cum. Et malesuada fames ac turpis egestas maecenas pharetra. Sit amet risus nullam eget. Viverra ipsum nunc aliquet bibendum enim facilisis gravida. Bibendum ut tristique et egestas quis.\nAliquet risus feugiat in ante metus dictum at tempor. Lacus viverra vitae congue eu consequat ac felis. Amet est placerat in egestas. Tristique nulla aliquet enim tortor at auctor urna. Faucibus a pellentesque sit amet porttitor eget dolor morbi non. Tincidunt lobortis feugiat vivamus at augue eget arcu. Tellus in metus vulputate eu scelerisque. Nulla malesuada pellentesque elit eget gravida cum sociis natoque penatibus. Etiam tempor orci eu lobortis elementum nibh tellus molestie nunc. Erat nam at lectus urna duis convallis convallis. Aliquam vestibulum morbi blandit cursus risus at ultrices. Mus mauris vitae ultricies leo integer malesuada nunc vel. Vel pharetra vel turpis nunc eget lorem dolor sed. Quis hendrerit dolor magna eget est lorem. A lacus vestibulum sed arcu non odio euismod lacinia.\nLobortis mattis aliquam faucibus purus in massa tempor nec. Ut venenatis tellus in metus. Donec ac odio tempor orci dapibus ultrices in iaculis nunc. Arcu felis bibendum ut tristique et egestas. Fermentum iaculis eu non diam phasellus vestibulum. Pellentesque diam volutpat commodo sed. Neque egestas congue quisque egestas diam in arcu cursus. Eleifend quam adipiscing vitae proin sagittis nisl rhoncus. Sed sed risus pretium quam vulputate dignissim suspendisse. Scelerisque fermentum dui faucibus in ornare quam viverra orci sagittis. Hendrerit gravida rutrum quisque non tellus. Blandit cursus risus at ultrices. Volutpat commodo sed egestas egestas fringilla phasellus faucibus scelerisque eleifend. Non blandit massa enim nec dui nunc. Viverra adipiscing at in tellus integer feugiat scelerisque varius.\n"}),search.addEventListener("input",t,!0);function t(){const s=5;var n=this.value,o=e.search(n,{limit:s,enrich:!0});const t=new Map;for(const e of o.flatMap(e=>e.result)){if(t.has(e.doc.href))continue;t.set(e.doc.href,e.doc)}if(suggestions.innerHTML="",suggestions.classList.remove("d-none"),t.size===0&&n){const e=document.createElement("div");e.innerHTML=`No results for "<strong>${n}</strong>"`,e.classList.add("suggestion__no-results"),suggestions.appendChild(e);return}for(const[r,a]of t){const n=document.createElement("div");suggestions.appendChild(n);const e=document.createElement("a");e.href=r,n.appendChild(e);const o=document.createElement("span");o.textContent=a.title,o.classList.add("suggestion__title"),e.appendChild(o);const i=document.createElement("span");if(i.textContent=a.description,i.classList.add("suggestion__description"),e.appendChild(i),suggestions.appendChild(n),suggestions.childElementCount==s)break}}})()